fn main() {
    println!("-------------------------------------------- > test1()");
    test1();
    println!("-------------------------------------------- > test2()");
    test2();
    println!("-------------------------------------------- > test3()");
    test3();
    println!("-------------------------------------------- > test4()");
    test4();
}

fn test1() {
    // 声明不可变变量
    let x = 5; // 自动推导遍历类型
    let y: i64 = 10; // 指定变量类型

    println!("x:{}", x);
    println!("y:{y}");

    // 不可变变量修改值，报错
    // x = 10;
}

fn test2() {
    // 关键词 mut修饰的变量，就是可变变量，可以修改值
    let mut x = 50;
    println!("x:{x}");
    x = 100;
    println!("x:{x}");
}

fn test3() {
    let x = 1;
    println!("x:{x}");

    // 不可变变量修改值，报错
    // x = 2;

    // 已经声明的变量，可以重新声明变量赋新的值，
    let x: i32 = 5;
    println!("x:{x}");
}

fn test4() {
    let x = 20;
    println!("x:{x}");

    // 代码块重新声明变量，只作用于代码块区域
    {
        // 已经声明的变量，可以重新声明变量赋新的值，
        let x = 30;
        println!("x:{x}");
    }

    // 这里打印的是当前代码块的变量
    println!("x:{x}");
}

